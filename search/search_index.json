{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ACR Loader","text":"<p>Loads data from ACRCloud's broadcat monitoring service and stores it in our ownCloud instance and/or MinIO service. Runs as a cronjob and is scheduled to run once per day.</p>"},{"location":"#usage","title":"Usage","text":"<pre><code>helm install my-acrloader oci://ghcr.io/radiorabe/helm/acrloader \\\n  --version x.y.z \\\n  --set acr.bearerToken=&lt;token&gt;,acr.projectId=&lt;pid&gt;,streamId=&lt;sid&gt; \\\n  --set oc.enabled=true \\\n  --set oc.url=&lt;url&gt;,oc.user=&lt;user&gt;,oc.pass=&lt;pass&gt;,oc.path=&lt;path&gt; \\\n  --set minio.enabled=true \\\n  --set minio.url=&lt;url&gt;,minio.access_key=&lt;key&gt;,minio.secret_key=&lt;secret&gt;\n</code></pre>"},{"location":"#development","title":"Development","text":"<pre><code>python -mvenv venv\n. venv/bin/activate\n\npython -mpip install poetry\n\npoetry install\n\npoetry run pytest\n\npre-commit run\n</code></pre>"},{"location":"#license","title":"License","text":"<p>This application is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, version 3 of the License.</p>"},{"location":"#copyright","title":"Copyright","text":"<p>Copyright (c) 2023 Radio Bern RaBe</p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>main</li> </ul>"},{"location":"reference/main/","title":"main","text":"<p>Stores daily data from ACRCloud's broadcast monitoring service in ownCloud.</p>"},{"location":"reference/main/#main.daterange","title":"<code>daterange(start_date, end_date)</code>","text":"<p>Get range to load.</p> Source code in <code>main.py</code> <pre><code>def daterange(start_date: datetime, end_date: datetime) -&gt; list[datetime]:\n    \"\"\"Get range to load.\"\"\"\n    return [start_date + timedelta(n) for n in range(int((end_date - start_date).days))]\n</code></pre>"},{"location":"reference/main/#main.fetch_one","title":"<code>fetch_one(acr, acr_project_id, acr_stream_id, requested)</code>  <code>cached</code>","text":"<p>Fetch one \"day\" from ACRCloud.</p> Source code in <code>main.py</code> <pre><code>@cache\ndef fetch_one(\n    acr: ACRClient,\n    acr_project_id: str,\n    acr_stream_id: str,\n    requested: str,\n) -&gt; Any:  # noqa: ANN401\n    \"\"\"Fetch one \"day\" from ACRCloud.\"\"\"\n    return acr.get_bm_cs_projects_results(\n        project_id=int(acr_project_id),\n        stream_id=acr_stream_id,\n        params=GetBmCsProjectsResultsParams(\n            type=\"day\",\n            date=requested,\n            min_duration=0,\n            max_duration=3600,\n            isrc_country=\"\",\n        ),\n    )\n</code></pre>"},{"location":"reference/main/#main.main","title":"<code>main()</code>","text":"<p>Fetch data from ACRCloud and stores it on-premise.</p> Source code in <code>main.py</code> <pre><code>def main() -&gt; None:  # pragma: no cover\n    \"\"\"Fetch data from ACRCloud and stores it on-premise.\"\"\"\n    p = ArgParser(\n        description=__doc__,\n        default_config_files=[\n            \"/etc/acrloader.conf\",\n            \"~/.acrloader.conf\",\n            \"acrloader.conf\",\n        ],\n    )\n    p.add(\n        \"-c\",\n        \"--my-config\",\n        is_config_file=True,\n        help=\"config file path\",\n    )\n    p.add(\n        \"--acr-bearer-token\",\n        required=True,\n        env_var=\"ACR_BEARER_TOKEN\",\n        help=\"ACRCloud bearer token\",\n    )\n    p.add(\n        \"--acr-project-id\",\n        required=True,\n        env_var=\"ACR_PROJECT_ID\",\n        help=\"ACRCloud project id\",\n    )\n    p.add(\n        \"--acr-stream-id\",\n        required=True,\n        env_var=\"ACR_STREAM_ID\",\n        help=\"ACRCloud stream id\",\n    )\n    p.add(\n        \"--oc\",\n        default=False,\n        action=\"store_true\",\n        env_var=\"OC_ENABLE\",\n        help=\"Enable ownCloud\",\n    )\n    p.add(\n        \"--oc-url\",\n        default=\"https://share.rabe.ch\",\n        env_var=\"OC_URL\",\n        help=\"ownCloud URL\",\n    )\n    p.add(\n        \"--oc-user\",\n        required=True,\n        env_var=\"OC_USER\",\n        help=\"ownCloud user\",\n    )\n    p.add(\n        \"--oc-pass\",\n        required=True,\n        env_var=\"OC_PASS\",\n        help=\"ownCloud pass\",\n    )\n    p.add(\n        \"--oc-path\",\n        default=\"IT/Share/ACRCloud Data\",\n        env_var=\"OC_PATH\",\n        help=\"ownCloud path\",\n    )\n    p.add(\n        \"--minio\",\n        default=False,\n        action=\"store_true\",\n        env_var=\"MINIO_ENABLE\",\n        help=\"Enable MinIO\",\n    )\n    p.add(\n        \"--minio-url\",\n        default=\"minio.service.int.rabe.ch:9000\",\n        env_var=\"MINIO_HOST\",\n        help=\"MinIO Hostname\",\n    )\n    p.add(\n        \"--minio-secure\",\n        default=True,\n        env_var=\"MINIO_SECURE\",\n        help=\"MinIO Secure param\",\n    )\n    p.add(\n        \"--minio-cert-reqs\",\n        default=\"CERT_REQUIRED\",\n        env_var=\"MINIO_CERT_REQS\",\n        help=\"cert_reqs for urlib3.PoolManager used by MinIO\",\n    )\n    p.add(\n        \"--minio-ca-certs\",\n        default=\"/etc/pki/ca-trust/extracted/openssl/ca-bundle.trust.crt\",\n        env_var=\"MINIO_CA_CERTS\",\n        help=\"ca_certs for urlib3.PoolManager used by MinIO\",\n    )\n    p.add(\n        \"--minio-bucket\",\n        default=\"acrcloud.raw\",\n        env_var=\"MINIO_BUCKET\",\n        help=\"MinIO Bucket Name\",\n    )\n    p.add(\n        \"--minio-access-key\",\n        default=None,\n        env_var=\"MINIO_ACCESS_KEY\",\n        help=\"MinIO Access Key\",\n    )\n    p.add(\n        \"--minio-secret-key\",\n        default=None,\n        env_var=\"MINIO_SECRET_KEY\",\n        help=\"MinIO Secret Key\",\n    )\n    options = p.parse_args()\n    acr_client = ACRClient(\n        bearer_token=options.acr_bearer_token,\n    )\n\n    if options.oc:\n        # figure out what we are missing on ownCloud\n        oc = OwnCloudClient(options.oc_url)\n        oc.login(options.oc_user, options.oc_pass)\n        missing = oc_check(oc=oc, oc_path=options.oc_path)\n\n        if missing:\n            # fetch and store missing data\n            oc_fetch(\n                missing,\n                acr=acr_client,\n                oc=oc,\n                acr_project_id=options.acr_project_id,\n                acr_stream_id=options.acr_stream_id,\n                oc_path=options.oc_path,\n            )\n\n    if options.minio:\n        mc = Minio(\n            options.minio_url,\n            options.minio_access_key,\n            options.minio_secret_key,\n            secure=options.minio_secure,\n            http_client=urllib3.PoolManager(\n                cert_reqs=options.minio_cert_reqs,\n                ca_certs=options.minio_ca_certs,\n            ),\n        )\n        if not mc.bucket_exists(options.minio_bucket):\n            mc.make_bucket(options.minio_bucket)\n        missing = mc_check(mc=mc, bucket=options.minio_bucket)\n\n        if missing:\n            # fetch and store missing data\n            mc_fetch(\n                missing,\n                acr=acr_client,\n                mc=mc,\n                acr_project_id=options.acr_project_id,\n                acr_stream_id=options.acr_stream_id,\n                bucket=options.minio_bucket,\n            )\n</code></pre>"},{"location":"reference/main/#main.mc_check","title":"<code>mc_check(mc, bucket)</code>","text":"<p>Check MinIO for missing files.</p> Source code in <code>main.py</code> <pre><code>def mc_check(mc: Minio, bucket: str) -&gt; list[datetime]:\n    \"\"\"Check MinIO for missing files.\"\"\"\n    missing = []\n    start = datetime.now() - timedelta(7)  # noqa: DTZ005\n    for requested in tqdm(\n        daterange(start, datetime.now()),  # noqa: DTZ005\n        desc=\"Checking MinIO\",\n    ):\n        try:\n            mc.stat_object(bucket, requested.strftime(\"%Y-%m-%d.json\"))\n        except S3Error as ex:  # noqa: PERF203\n            if ex.code == \"NoSuchKey\":\n                missing.append(requested)\n    return missing\n</code></pre>"},{"location":"reference/main/#main.mc_fetch","title":"<code>mc_fetch(missing, acr, mc, acr_project_id, acr_stream_id, bucket)</code>","text":"<p>Fetch missing data from ACRCloud and stores it in MinIO.</p> Source code in <code>main.py</code> <pre><code>def mc_fetch(  # noqa: PLR0913\n    missing: list[datetime],\n    acr: ACRClient,\n    mc: Minio,\n    acr_project_id: str,\n    acr_stream_id: str,\n    bucket: str,\n) -&gt; None:\n    \"\"\"Fetch missing data from ACRCloud and stores it in MinIO.\"\"\"\n    for requested in tqdm(missing, desc=\"Loading into MinIO from ACRCloud\"):\n        _as_bytes = json.dumps(\n            fetch_one(\n                acr=acr,\n                acr_project_id=acr_project_id,\n                acr_stream_id=acr_stream_id,\n                requested=requested.strftime(\"%Y%m%d\"),\n            ),\n        ).encode(\"utf-8\")\n        mc.put_object(\n            bucket,\n            requested.strftime(\"%Y-%m-%d.json\"),\n            BytesIO(_as_bytes),\n            length=len(_as_bytes),\n            content_type=\"application/json\",\n        )\n</code></pre>"},{"location":"reference/main/#main.oc_check","title":"<code>oc_check(oc, oc_path)</code>","text":"<p>Check ownCloud for missing files.</p> Source code in <code>main.py</code> <pre><code>def oc_check(oc: OwnCloudClient, oc_path: str) -&gt; list[datetime]:\n    \"\"\"Check ownCloud for missing files.\"\"\"\n    missing = []\n    start = datetime.now() - timedelta(7)  # noqa: DTZ005\n    for requested in tqdm(\n        daterange(start, datetime.now()),  # noqa: DTZ005\n        desc=\"Checking ownCloud\",\n    ):\n        oc_mkdir(oc, oc_path)\n        oc_mkdir(oc, str(Path(oc_path) / str(requested.year)))\n        oc_mkdir(oc, str(Path(oc_path) / str(requested.year) / str(requested.month)))\n        status = oc_file_exists(\n            oc,\n            str(\n                Path(oc_path)\n                / str(requested.year)\n                / str(requested.month)\n                / requested.strftime(\"%Y-%m-%d.json\"),\n            ),\n        )\n        if not status:\n            missing.append(requested)\n    return missing\n</code></pre>"},{"location":"reference/main/#main.oc_fetch","title":"<code>oc_fetch(missing, acr, oc, acr_project_id, acr_stream_id, oc_path)</code>","text":"<p>Fetch missing data from ACRCloud and stores it in ownCloud.</p> Source code in <code>main.py</code> <pre><code>def oc_fetch(  # noqa: PLR0913\n    missing: list[datetime],\n    acr: ACRClient,\n    oc: OwnCloudClient,\n    acr_project_id: str,\n    acr_stream_id: str,\n    oc_path: str,\n) -&gt; None:\n    \"\"\"Fetch missing data from ACRCloud and stores it in ownCloud.\"\"\"\n    for requested in tqdm(missing, desc=\"Loading into ownCloud from ACRCloud\"):\n        target = str(\n            Path(oc_path)\n            / str(requested.year)\n            / str(requested.month)\n            / requested.strftime(\"%Y-%m-%d.json\"),\n        )\n        oc.put_file_contents(\n            target,\n            json.dumps(\n                fetch_one(\n                    acr=acr,\n                    acr_project_id=acr_project_id,\n                    acr_stream_id=acr_stream_id,\n                    requested=requested.strftime(\"%Y%m%d\"),\n                ),\n            ),\n        )\n</code></pre>"},{"location":"reference/main/#main.oc_file_exists","title":"<code>oc_file_exists(oc, path)</code>  <code>cached</code>","text":"<p>Check if file exists on ownCloud.</p> Source code in <code>main.py</code> <pre><code>@cache\ndef oc_file_exists(oc: OwnCloudClient, path: str) -&gt; bool:\n    \"\"\"Check if file exists on ownCloud.\"\"\"\n    try:\n        oc.file_info(path)\n    except HTTPResponseError as ex:\n        if str(ex) != \"HTTP error: 404\":  # pragma: no cover\n            logger.exception(\"File missing\")\n        return False\n    else:\n        return True\n</code></pre>"},{"location":"reference/main/#main.oc_mkdir","title":"<code>oc_mkdir(oc, path)</code>  <code>cached</code>","text":"<p>Create a dir on ownCloud.</p> Source code in <code>main.py</code> <pre><code>@cache\ndef oc_mkdir(oc: OwnCloudClient, path: str) -&gt; bool:\n    \"\"\"Create a dir on ownCloud.\"\"\"\n    try:\n        return oc.mkdir(path)\n    except HTTPResponseError as ex:  # pragma: no cover\n        if str(ex) != \"HTTP error: 405\":\n            logger.exception(\"Failed to mkdir\")\n        return True\n</code></pre>"}]}